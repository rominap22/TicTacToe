import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.awt.Font;
import java.awt.Dimension;
import javax.swing.*;

@SuppressWarnings("serial")
public class TicTacToePro extends JFrame {
	// Named-constants for the game board

	// private int ROWS, COLS;

	public int xWCount = 0;
	public int oWCount = 0;
	public int dCount = 0;
	// Named-constants of the various dimensions used for graphics drawing
	final int CELL_SIZE = 100; // cell width and height (square)
	final int CANVAS_WIDTH = CELL_SIZE * 1; // the drawing canvas
	final int CANVAS_HEIGHT = CELL_SIZE * 1;
	final int GRID_WIDTH = 8; // Grid-line's width
	final int GRID_WIDTH_HALF = GRID_WIDTH / 2; // Grid-line's half-width
	// Symbols (cross/nought) are displayed inside a cell, with padding from border
	final int CELL_PADDING = CELL_SIZE / 6;
	final int SYMBOL_SIZE = CELL_SIZE - CELL_PADDING * 2; // width/height
	final int SYMBOL_STROKE_WIDTH = 8; // pen's stroke width

	// Use an enumeration (inner class) to represent the various states of the game
	public enum GameState {
		PLAYING, DRAW, CROSS_WON, NOUGHT_WON
	}

	private GameState currentState; // the current game state

	// Use an enumeration (inner class) to represent the seeds and cell contents
	public enum Seed {
		EMPTY, CROSS, NOUGHT
	}

	private Seed currentPlayer; // the current player

	private Seed[][] board; // Game board of ROWS-by-COLS cells
	private DrawCanvas canvas; // Drawing canvas (JPanel) for the game board
	private JLabel statusBar; // Status Bar
	

	/** Constructor to setup the game and the GUI components */

	public TicTacToePro(int rows, int cols) {
		

		int ROWS = rows; // ROWS by COLS cells
		int COLS = cols;

		canvas = new DrawCanvas(ROWS, COLS); // Construct a drawing canvas (a JPanel)
		canvas.setPreferredSize(new Dimension(CANVAS_WIDTH * COLS, CANVAS_HEIGHT * ROWS));

		// The canvas (JPanel) fires a MouseEvent upon mouse-click
		canvas.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) { // mouse-clicked handler
				// System.out.println("clicked");
				int mouseX = e.getX();
				int mouseY = e.getY();
				// Get the row and column clicked
				int rowSelected = mouseY / CELL_SIZE;
				int colSelected = mouseX / CELL_SIZE;

				if (currentState == GameState.PLAYING) {
					if (rowSelected >= 0 && rowSelected < ROWS && colSelected >= 0 && colSelected < COLS
							&& board[rowSelected][colSelected] == Seed.EMPTY) {
						// System.out.println("HERE");
						// System.out.println(rowSelected);
						// System.out.println(colSelected);
						board[rowSelected][colSelected] = currentPlayer; // Make a move
						// System.out.println("did we make it");
						updateGame(currentPlayer, rowSelected, colSelected, ROWS, COLS); // update state
						// Switch player
						// System.out.println("did we make it");
						currentPlayer = (currentPlayer == Seed.CROSS) ? Seed.NOUGHT : Seed.CROSS;
					}
				} else { // game over
					initGame(rows, cols); // restart the game

				}
				// Refresh the drawing canvas
				repaint(); // Call-back paintComponent().
			}
		});

		// Setup the status bar (JLabel) to display status message
		statusBar = new JLabel("  ");
		statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 15));
		statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));

		Container cp = getContentPane();
		cp.setLayout(new BorderLayout());
		cp.add(canvas, BorderLayout.CENTER);
		cp.add(statusBar, BorderLayout.PAGE_END); // same as SOUTH

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		pack(); // pack all the components in this JFrame
		setTitle("Tic Tac Toe");
		setVisible(true); // show this JFrame

		board = new Seed[ROWS][COLS]; // allocate array
		initGame(rows, cols); // initialize the game board contents and game variables
	}

	public void county() {

		String result = "okay";

		if (JOptionPane.showConfirmDialog(null,
				"Player 1 (X) has " + xWCount + " wins, Player 2 (O) has " + oWCount + " wins, and there have been "
						+ dCount + " draws.\n" + "Play again?",
				result, JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
			System.exit(0);
		}

	}


	
	   
	   

	/** Initialize the game-board contents and the status */
	public void initGame(int rNum, int cNum) {
		for (int row = 0; row < rNum; ++row) {
			for (int col = 0; col < cNum; ++col) {
				board[row][col] = Seed.EMPTY; // all cells empty
			}
		}
		currentState = GameState.PLAYING; // ready to play
		currentPlayer = Seed.CROSS; // cross plays first

	}

	/**
	 * Update the currentState after the player with "theSeed" has placed on
	 * (rowSelected, colSelected).
	 */
	public void updateGame(Seed theSeed, int rowSelected, int colSelected, int rNum, int cNum) {
		if (hasWon(theSeed, rowSelected, colSelected, rNum, rNum)) { // check for win
			currentState = (theSeed == Seed.CROSS) ? GameState.CROSS_WON : GameState.NOUGHT_WON;
			if (theSeed == Seed.CROSS) {
				++xWCount;
			} else {
				++oWCount;
			}
			repaint();
			county();

		} else if (isDraw(rNum, rNum)) { // check for draw
			currentState = GameState.DRAW;
			++dCount;
			// System.out.println("else if");
			repaint();
			county();
		}
		// Otherwise, no change to current state (still GameState.PLAYING).
	}

	/** Return true if it is a draw (i.e., no more empty cell) */
	public boolean isDraw(int rNum, int cNum) {
		for (int row = 0; row < rNum; row++) {
			for (int col = 0; col < cNum; col++) {
				if (board[row][col] == Seed.EMPTY) {
					return false; // an empty cell found, not draw, exit
				}
			}
		}

		return true; // no more empty cell, it's a draw
	}

	/**
	 * Return true if the player with "theSeed" has won after placing at
	 * (rowSelected, colSelected)
	 */
	public boolean hasWon(Seed theSeed, int rowSelected, int colSelected, int rNum, int cNum) {

		int count = 0;
		for (int col = 0; col < rNum; ++col) {
			if (board[rowSelected][col] == theSeed) {
				++count;
				if (count == rNum)
					return true; // found
			}
		}
		// Check column and diagonals

		count = 0;

		for (int row = 0; row < rNum; ++row) {
			if (board[row][colSelected] == theSeed) {
				++count;
				if (count == rNum)
					return true; // found
				// else {

				// count = 0; // reset and count again if not consecutive
			} // }
		}

		count = 0;

		// 1st diag

		for (int row = 0; row < rNum; ++row) {
			if (board[row][row] == theSeed) {
				++count;
				if (count == rNum)
					return true; // found
			}
		}

		count = 0;

		//

		for (int row = rNum - 1; row >= 0; row--) {
			if (board[row][cNum - 1 - row] == theSeed) {
				++count;
				if (count == rNum)
					return true; // found
			}
		}

		count = 0;

//	   //other diag
//	   int colN = 0;
//	   for (int row = rNum-1; row >= 0; --row) {
//		      if (board[row][colN] == theSeed) {
//		         ++count;
//		        
//		         if (count == rNum) return true;  // found
//		         while (cNum>=0) {
//		        	 colN++;
//		        	 cNum--;
//		         }
//		       }
//		   }
//	   colN = 0;
//	   count = 0;

		return false; // no 4-in-a-line found
	}

	/**
	 * Inner class DrawCanvas (extends JPanel) used for custom graphics drawing.
	 */
	class DrawCanvas extends JPanel {

		int ROWS;
		int COLS;

		public DrawCanvas(int rNum, int cNum) {
			ROWS = rNum;
			COLS = cNum;
		}

		@Override
		public void paintComponent(Graphics g) { // invoke via repaint()
			super.paintComponent(g); // fill background
			setBackground(Color.WHITE); // set its background color

			// Draw the grid-lines
			g.setColor(Color.LIGHT_GRAY);
			for (int row = 1; row < ROWS; ++row) {
				g.fillRoundRect(0, CELL_SIZE * row - GRID_WIDTH_HALF, (CANVAS_WIDTH * COLS) - 1, GRID_WIDTH, GRID_WIDTH,
						GRID_WIDTH);
			}
			for (int col = 1; col < COLS; ++col) {
				g.fillRoundRect(CELL_SIZE * col - GRID_WIDTH_HALF, 0, GRID_WIDTH, (CANVAS_HEIGHT * ROWS) - 1,
						GRID_WIDTH, GRID_WIDTH);
			}

			// Draw the Seeds of all the cells if they are not empty
			// Use Graphics2D which allows us to set the pen's stroke
			Graphics2D g2d = (Graphics2D) g;
			g2d.setStroke(new BasicStroke(SYMBOL_STROKE_WIDTH, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND)); // Graphics2D
																												// only
			for (int row = 0; row < ROWS; ++row) {
				for (int col = 0; col < COLS; ++col) {
					int x1 = col * CELL_SIZE + CELL_PADDING;
					int y1 = row * CELL_SIZE + CELL_PADDING;
					if (board[row][col] == Seed.CROSS) {
						g2d.setColor(Color.RED);
						int x2 = (col + 1) * CELL_SIZE - CELL_PADDING;
						int y2 = (row + 1) * CELL_SIZE - CELL_PADDING;
						g2d.drawLine(x1, y1, x2, y2);
						g2d.drawLine(x2, y1, x1, y2);
					} else if (board[row][col] == Seed.NOUGHT) {
						g2d.setColor(Color.BLUE);
						g2d.drawOval(x1, y1, SYMBOL_SIZE, SYMBOL_SIZE);
					}
				}
			}

			// Print status-bar message
			if (currentState == GameState.PLAYING) {
				statusBar.setForeground(Color.BLACK);
				if (currentPlayer == Seed.CROSS) {
					statusBar.setText("X's Turn");
				} else {
					statusBar.setText("O's Turn");
				}
			} else if (currentState == GameState.DRAW) {
				statusBar.setForeground(Color.RED);
				statusBar.setText("It's a Draw! Click to play again.");
			} else if (currentState == GameState.CROSS_WON) {
				statusBar.setForeground(Color.RED);
				statusBar.setText("'X' Won! Click to play again.");
			} else if (currentState == GameState.NOUGHT_WON) {
				statusBar.setForeground(Color.RED);
				statusBar.setText("'O' Won! Click to play again.");
			}

		}
	}

	/** The entry main() method */
	public static void main(String[] args) {

		JFrame f = new JFrame();// creating instance of JFrame

		JToggleButton tb = new JToggleButton("push me");

		// JButton b1,b2;

		final JTextField tf1 = new JTextField();
		tf1.setBounds(50, 50, 150, 20);
		final JTextField tf2 = new JTextField();
		tf2.setBounds(50, 100, 150, 20);
		// tf3=new JTextField();
		// tf3.setBounds(50,150,150,20);
		// tf3.setEditable(false);
		// b1=new JButton("+");
		// b1.setBounds(50,200,50,50);
		// b2=new JButton("-");
		// b2.setBounds(120,200,50,50);
		tb.setBounds(30, 100, 100, 40);// x axis, y axis, width, height
		
		//f.getContentPane().add(new JLabel("Hello World"));
		
		// b1.addActionListener(this);
		// b2.addActionListener(this);
		f.getContentPane().add(tf1);
		f.getContentPane().add(tf2);// f.add(b1);f.add(b2);

		f.getContentPane().add(tb);

		f.setSize(400, 450);// 400 width and 500 height
		f.getContentPane().setLayout(null);// using no layout managers
		f.setLocationRelativeTo(null);
		f.setVisible(true);// making the frame visible
		
		JLabel label1 = new JLabel("Welcome to Tic-Tac-Toe!!");
		label1.setLocation(100, 10);

	label1.setSize(400, 450);
		
		f.add(label1);
		f.setVisible(true);

		JFrame window = new JFrame("Tic-Tac-Toe");
		window.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		tb.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				JToggleButton btn = (JToggleButton) e.getSource();
				btn.setText(btn.isSelected() ? "pushed" : "push me");

				String s1 = tf1.getText();
				String s2 = tf2.getText();

				if (s1.equals("")) {
					s1 = "3";
				}
				if (s2.equals("")) {
					s2 = "3";
				}

				int a = Integer.parseInt(s1);
				int b = Integer.parseInt(s2);

				System.out.println(s1 + "" + s2);

				if (btn.isSelected()) {
					f.dispose();
					// setLayout(new GridLayout(3,3));
					// initializebuttons();

					// window.getContentPane().add(new Class2());
					// window.setBounds(300,200,300,300);
					// window.setVisible(true);

					SwingUtilities.invokeLater(new Runnable() {

						@Override
						public void run() {

							new TicTacToePro(a, b); // Let the constructor do the job
						}
					});

				}
			}
		});
		// JButton b=new JButton("click");//creating instance of JButton

//		if(b.getModel().isPressed()) {
//			 
//		}

		// Run GUI codes in the Event-Dispatching thread for thread safety

	}
}
